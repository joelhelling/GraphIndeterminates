group 'Thesis'
version '0.2'

apply plugin: 'java'
apply plugin: 'idea'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile 'net.sf.jopt-simple:jopt-simple:5.0.3'
    compile 'it.unimi.dsi:fastutil:7.0.13'
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'LabelAlgorithm',
                'Implementation-Version': version,
                'Main-Class': 'edu.csuci.runner.RunLabeler'
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it)} }
}

task hrss(dependsOn: classes, type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    minHeapSize = '1G'
    maxHeapSize = '8G'
    main = 'edu.csuci.runner.RunLabeler'

    def date = new Date()
    def fileName = 'hrss_' + date.format('MMddyy_hh_mm_ssa') + '.txt'
    args = ['--fnvertices', '--vertices', '1000', 'iterations', '100', 'warmup', '20', '--density', '0.5', '--output', fileName]
}

task hrss_ascending(dependsOn: classes, type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    minHeapSize = '1G'
    maxHeapSize = '8G'
    main = 'edu.csuci.runner.RunLabeler'

    def date = new Date()
    def fileName = 'hrss_ascending_' + date.format('MMddyy_hh_mm_ssa') + '.txt'
    args = ['--fnvertices', '--heurasc', '1', '--vertices', '1000', 'iterations', '100', 'warmup', '20', '--density', '0.5', '--output', fileName]
}

task hrss_descending(dependsOn: classes, type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    minHeapSize = '1G'
    maxHeapSize = '8G'
    main = 'edu.csuci.runner.RunLabeler'

    def date = new Date()
    def fileName = 'hrss_descending_' + date.format('MMddyy_hh_mm_ssa') + '.txt'
    args = ['--fnvertices', '--heurdesc', '1', '--vertices', '1000', 'iterations', '100', 'warmup', '20', '--density', '0.5', '--output', fileName]
}

task hrss_qcompasc(dependsOn: classes, type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    minHeapSize = '1G'
    maxHeapSize = '8G'
    main = 'edu.csuci.runner.RunLabeler'

    def date = new Date()
    def fileName = 'hrss_qcompasc' + date.format('MMddyy_hh_mm_ssa') + '.txt'
    args = ['--fnvertices', '--qcompasc', '--vertices', '1000', 'iterations', '100', 'warmup', '20', '--density', '0.5', '--output', fileName]
}

task hrss_ascending_qcompasc(dependsOn: classes, type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    minHeapSize = '1G'
    maxHeapSize = '8G'
    main = 'edu.csuci.runner.RunLabeler'

    def date = new Date()
    def fileName = 'hrss_ascending_qcompasc' + date.format('MMddyy_hh_mm_ssa') + '.txt'
    args = ['--fnvertices', '--qcompasc', '--heurasc', '1', '--vertices', '1000', 'iterations', '100', 'warmup', '20', '--density', '0.8', '--output', fileName]
}

task hrss_descending_qcompasc(dependsOn: classes, type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    minHeapSize = '1G'
    maxHeapSize = '8G'
    main = 'edu.csuci.runner.RunLabeler'

    def date = new Date()
    def fileName = 'hrss_descending_qcompasc_0.5_1500_' + date.format('MMddyy_hh_mm_ssa') + '.txt'
    args = ['--fnvertices', '--qcompasc', '--heurdesc', '1', '--vertices', '1500', 'iterations', '100', 'warmup', '20', '--density', '0.1', '--output', fileName]
}

task cgm(dependsOn: classes, type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    minHeapSize = '1G'
    maxHeapSize = '8G'
    main = 'edu.csuci.runner.RunLabeler'

    def date = new Date()
    def fileName = 'cgm_' + date.format('MMddyy_hh_mm_ssa') + '.txt'
    args = ['--cgm', '--vertices', '1000', 'iterations', '100', 'warmup', '20', '--density', '0.1', '--output', fileName]
}

task kk(dependsOn: classes, type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    minHeapSize = '1G'
    maxHeapSize = '8G'
    main = 'edu.csuci.runner.RunLabeler'

    def date = new Date()
    def fileName = 'kk_' + date.format('MMddyy_hh_mm_ssa') + '.txt'
    args = ['--kk', '--vertices', '1000', 'iterations', '100', 'warmup', '20', '--density', '0.5', '--output', fileName]
}

task ascending(dependsOn: classes, type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    minHeapSize = '1G'
    maxHeapSize = '8G'
    main = 'edu.csuci.runner.RunLabeler'

    def date = new Date()
    def fileName = 'ascending_' + date.format('MMddyy_hh_mm_ssa') + '.txt'
    args = ['--ascending', '--qcompasc', '--heurdesc', '1', '--vertices', '1000', 'iterations', '100', 'warmup', '20', '--output', fileName]
}

task all_graphs_on_n_vertices(dependsOn: classes, type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    minHeapSize = '1G'
    maxHeapSize = '8G'
    main = 'edu.csuci.runner.RunLabeler'

    def date = new Date()
    def fileName = 'all_n_' + date.format('MMddyy_hh_mm_ssa') + '.txt'
    args = ['--alln', '--vertices', '7', '--output', fileName]
}

task shuffle(dependsOn: classes, type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    minHeapSize = '1G'
    maxHeapSize = '8G'
    main = 'edu.csuci.runner.RunLabeler'

    def date = new Date()
    def fileName = 'shuffle_' + date.format('MMddyy_hh_mm_ssa') + '.txt'
    args = ['--shuffle', '--heurshuffle', '--vertices', '1000', '--density', '0.5', '--output', fileName]
}
